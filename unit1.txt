# main app instace - entry to the app
from fastapi import FastAPI, Header
from typing import Optional
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware


# obj of FastAPI or FastAPI instance
app = FastAPI()
'''
OPTIONS requests are preflight checks for CORS.
CORS middleware allows these requests.
allow_origins=["*"] makes it work for any frontend (change this to a specific domain for production security).
'''
# Allow all origins, methods, and headers (for testing purposes)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Change this to specific domains for security
    allow_credentials=True,
    allow_methods=["*"],  # Allows all HTTP methods (GET, POST, OPTIONS, etc.)
    allow_headers=["*"],  # Allows all headers
)

# path that sends the response incase of a request
# / meants it is the root path
@app.get('/')
# path handler function
async def read_root():
    return {"message": "Hello World!"}

# defining new endpoint
# passing name as path parameter
# @app.get('/greet/{name}')
# async def greet_name(name:str, age:int) -> dict:
#     return {"message":f"Hello {name}","age":age}

# passing name as a query parameter
# @app.get('/greet')
# async def greet_name(name:str) -> dict:
#     return {"message":f"Hello {name}"}

# mixing path and query params
# if it is in path then we pass it as part of url but age will be given as: http://127.0.0.1:8000/greet/anshi?age=23
# @app.get('/greet/{name}')
# async def greet_name(name:str, age:int) -> dict:
#     return {"message":f"Hello {name}","age":age}

# making query param (name) optional
@app.get('/greet')
# name default val User if not specified anything else
# age defualt val 0
async def greet_name(name:Optional[str] = "User", age:int = 0) -> dict:
    return {"message":f"Hello {name}","age":age}
# http://127.0.0.1:8000/greet?name=anu&age=23
# http://127.0.0.1:8000/greet

# class that defines fields of data to be sent from client to server or vice versa
class BookCreateMode(BaseModel):
    # defining type of the fields using :
    title : str
    author : str

# defining endpoint to create resource
@app.post('/create_book')
async def create_book(book_data:BookCreateMode):
    return  {
        "title": book_data.title,
        "author": book_data.author
    }

# status code you can customize
@app.get('/get_headers', status_code=201)
async def get_headers(
    accept:str = Header(None),
    content_type: str = Header(None),
    user_agent: str = Header(None),
    host:str = Header(None)
):
    request_headers = {}

    request_headers["Accept"] = accept
    request_headers["Content-Type"] = content_type
    request_headers["User-Agent"] = user_agent
    request_headers["Host"] = host

    return request_headers

# Pydantic is a data validation and settings management library for Python, often used with FastAPI to validate request and response data.
# BaseSettings is a special class from Pydantic that helps manage environment variables and application settings.

How BaseSettings Works
BaseSettings allows you to define application configurations using environment variables, .env files, or default values in Python.